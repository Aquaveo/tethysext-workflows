"use strict";(self.webpackChunkworkflows_extension=self.webpackChunkworkflows_extension||[]).push([[9049],{1787:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorial/add_workflows_files","title":"Add Workflows Files","description":"Start from Previous Solution","source":"@site/docs/tutorial/add_workflows.md","sourceDirName":"tutorial","slug":"/tutorial/add_workflows_files","permalink":"/tethysext-workflows/docs/tutorial/add_workflows_files","draft":false,"unlisted":false,"editUrl":"https://github.com/Aquaveo/tethysext-workflows/edit/main/docs/docs/tutorial/add_workflows.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"add_workflows_files","title":"Add Workflows Files","sidebar_label":"Add Workflows Files","excerpt":"Add workflows files","sidebar_position":6},"sidebar":"documentationSidebar","previous":{"title":"Add Workflows Page","permalink":"/tethysext-workflows/docs/tutorial/workflows_page"},"next":{"title":"Add Workflow Steps","permalink":"/tethysext-workflows/docs/tutorial/add_workflows_steps"}}');var r=n(4848),s=n(8453);const a={id:"add_workflows_files",title:"Add Workflows Files",sidebar_label:"Add Workflows Files",excerpt:"Add workflows files",sidebar_position:6},i=void 0,l={},d=[{value:"Start from Previous Solution",id:"start-from-previous-solution",level:3},{value:"Add Utilities File",id:"add-utilities-file",level:3},{value:"Add the Workflow Base",id:"add-the-workflow-base",level:3},{value:"Add a New Workflow",id:"add-a-new-workflow",level:3},{value:"Adding Initialization",id:"adding-initialization",level:3},{value:"Solution",id:"solution",level:3}];function c(e){const o={a:"a",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h3,{id:"start-from-previous-solution",children:"Start from Previous Solution"}),"\n",(0,r.jsx)(o.p,{children:"If you wish to use the previous solution as a starting point:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b add-workflows-page-step add-workflows-page-step-complete\n"})}),"\n",(0,r.jsx)(o.h3,{id:"add-utilities-file",children:"Add Utilities File"}),"\n",(0,r.jsxs)(o.p,{children:["Next, create a new folder in your app directory called ",(0,r.jsx)(o.code,{children:"workflows"}),". You'll store the code for your workflows here, but for now, add a file named ",(0,r.jsx)(o.code,{children:"utilities.py"}),". This file will contain some utility functions that will be used by the workflows extension. Copy and paste this code into the new file:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/utilities.py"',children:"import os\nfrom datetime import datetime\n\nimport osgeo\nfrom pyproj import datadir\nimport pytz\nimport timezonefinder\n\n\ndef get_gmt_offset(lat, long):\n    \"\"\"Gets the GMT offset for a given latitude and longitude. \n\n    Args:\n        lat (float): Lattitude.\n        long (float): Longitude\n\n    Returns:\n        gmt (float): The GMT offset in hours.\n    \"\"\"\n    tf = timezonefinder.TimezoneFinder()\n    timezone_str = tf.certain_timezone_at(lat=lat, lng=long)\n    timezone = pytz.timezone(timezone_str)\n    dt = datetime.now(timezone)\n    return dt.utcoffset().total_seconds() / 3600\n\n\ndef safe_str(s):\n    s_safe = \"\".join([c for c in s if c.isalpha() or c.isdigit() or c == ' ']).rstrip()\n    s_safe = s_safe.replace(' ', '_')\n    return s_safe\n\n\ndef get_condor_fdb_root(debug=False):\n    \"\"\"This function should only be called in an app-available environment (don't call in job scripts).\"\"\"\n    # Use CONDOR_FDB_ROOT_DIR if set, otherwise use FDB_ROOT_DIR\n    dir = os.environ.get('CONDOR_FDB_ROOT_DIR', os.environ.get('FDB_ROOT_DIR', None))\n    if not dir:\n        raise RuntimeError('CONDOR_FDB_ROOT_DIR and FDB_ROOT_DIR environment variables not set.')\n    return dir\n\n\ndef get_condor_proj_dir(debug=False):\n    \"\"\"This function should only be called in an app-available environment (don't call in job scripts).\"\"\"\n    CONTAINER_PROJ_DIR = '/var/lib/condor/micromamba/envs/tethys/share/proj'\n\n    # If in debug mode, use the local proj lib as fallback, otherwise use the container proj as fallback\n    if debug:\n        fallback = datadir.get_data_dir()\n    else:\n        fallback = CONTAINER_PROJ_DIR\n\n    dir = os.environ.get('CONDOR_PROJ_LIB', fallback)\n    return {'PROJ_DATA': dir, 'PROJ_DEBUG': '3'}\n\n\ndef get_gdal_data_dirs(debug=False):\n    \"\"\"This function should only be called in an app-available environment (don't call in job scripts).\"\"\"\n    CONTAINER_CONDA_PREFIX = '/var/lib/condor/micromamba/envs/tethys'\n    CONTAINER_GDAL_DIR = 'share/gdal'\n    CONTAINER_GDAL_PLUGINS = 'lib/python3.1/site-packages/osgeo/gdalplugins'\n\n    if debug:\n        gdal_path = os.path.dirname(osgeo.__file__)\n        conda_prefix = os.environ.get('CONDA_PREFIX')\n        gdal_driver_path = os.path.join(gdal_path, 'gdalplugins')\n        gdal_data_path = os.path.join(conda_prefix, 'share', 'gdal')\n    else:\n        conda_prefix = '/var/lib/condor/micromamba/envs/tethys'\n        gdal_data_path = os.path.join(CONTAINER_CONDA_PREFIX, CONTAINER_GDAL_DIR)\n        gdal_driver_path = os.path.join(CONTAINER_CONDA_PREFIX, CONTAINER_GDAL_PLUGINS)\n\n    gdal_data_path = os.environ.get('CONDOR_GDAL_DATA', gdal_data_path)\n    gdal_driver_path = os.environ.get('CONDOR_GDAL_DRIVER_PATH', gdal_driver_path)\n\n    return {'GDAL_DATA': gdal_data_path, 'GDAL_DRIVER_PATH': gdal_driver_path}\n\n\ndef get_geoserver_ports(debug=False):\n    return os.environ.get('GEOSERVER_CLUSTER_PORTS')\n\n\ndef get_condor_env():\n    \"\"\"Build the condor environment variables string. This function should only be called in an app-available environment (don't call in job scripts).\"\"\"  # noqa: E501\n    from django.conf import settings\n    debug = settings.DEBUG\n    job_env = {\n        'FDB_ROOT_DIR': get_condor_fdb_root(debug),\n        'GEOSERVER_CLUSTER_PORTS': get_geoserver_ports(debug),\n    }\n    job_env.update(get_gdal_data_dirs(debug))\n    job_env.update(get_condor_proj_dir(debug))\n    job_env_str = ';'.join([f'{k}={v}' for k, v in job_env.items()])\n    return job_env_str\n\n"})}),"\n",(0,r.jsx)(o.p,{children:"As part of the this step, you'll need to set up a fdb_root_dir/condor_fdb_root_dir environment variable."}),"\n",(0,r.jsx)(o.p,{children:"If you are using Windows, run this command in either a command prompt or windows powershell session:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:'setx FDB_ROOT_DIR "C:\\fdbs"\n'})}),"\n",(0,r.jsx)(o.p,{children:"If you are using Linux or Mac, run these commands:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"echo 'export CONDOR_FDB_ROOT_DIR=/fdbs' >> ~/.bashrc\nsource ~/.bashrc\n"})}),"\n",(0,r.jsx)(o.p,{children:"This environment variable will be needed when running condor jobs later."}),"\n",(0,r.jsx)(o.h3,{id:"add-the-workflow-base",children:"Add the Workflow Base"}),"\n",(0,r.jsxs)(o.p,{children:["For this tutorial, we'll create a base class for any workflows you create for now. Begin by creating a new file called ",(0,r.jsx)(o.code,{children:"workflow_base.py"})," inside your ",(0,r.jsx)(o.code,{children:"workflows"})," folder."]}),"\n",(0,r.jsx)(o.p,{children:"Add this code to your new file:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows_workflow_base.py"',children:'from tethysext.workflows.models import TethysWorkflow\n\n\nclass WorkflowBase(TethysWorkflow):\n    """\n    Base class for workflows.\n    """\n    __abstract__ = True\n\n    def get_url_name(self):\n        from ..app import App as app\n        return f\'{app().url_namespace}:{self.TYPE}_workflow\'\n'})}),"\n",(0,r.jsx)(o.h3,{id:"add-a-new-workflow",children:"Add a New Workflow"}),"\n",(0,r.jsxs)(o.p,{children:["Create a new file called ",(0,r.jsx)(o.code,{children:"__init__.py"})," inside the ",(0,r.jsx)(o.code,{children:"workflows"})," directory, along with a new folder called ",(0,r.jsx)(o.code,{children:"basic_workflow"}),"."]}),"\n",(0,r.jsxs)(o.p,{children:["Inside the ",(0,r.jsx)(o.code,{children:"basic_workflow"})," folder, create a new file named ",(0,r.jsx)(o.code,{children:"__init__.py"}),". This file will contain the code for the workflow and its steps."]}),"\n",(0,r.jsxs)(o.p,{children:["Add the following code to this new ",(0,r.jsx)(o.code,{children:"__init__.py"})," file:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethsyapp/workflows_tutorial/workflows/basic_workflow/__init__.py"',children:"from ..workflow_base import WorkflowBase\n\nclass BasicWorkflow(WorkflowBase):\n    \"\"\"\n    Run a basic workflow.\n    \"\"\"\n    TYPE = 'basic_workflow'\n    DISPLAY_TYPE_SINGULAR = 'Basic Workflow'\n    DISPLAY_TYPE_PLURAL = 'Basic Workflows'\n\n"})}),"\n",(0,r.jsxs)(o.p,{children:["Next, update your ",(0,r.jsx)(o.code,{children:"controllers.py"})," file with these lines of code:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/controllers.py"',children:'# highlight-start\nfrom.workflows import WORKFLOW_OPTIONS\n# highlight-end\n@controller(name="home", url="home")\nclass WorkflowLayoutController(WorkflowLayout):\n    app = App\n    base_template = \'workflows_tutorial/base.html\'\n    \n    def __init__(self):\n        super().__init__(SpatialManager, MapManager, App.DATABASE_NAME)\n    # highlight-start\n    def get_workflow_types(cls, request=None, context=None):\n        return WORKFLOW_OPTIONS\n    # highlight-end\n'})}),"\n",(0,r.jsx)(o.p,{children:"Now, return to your app and refresh it in the browser. After pressing the blue + button in the bottom right corner, a form should pop up. Now, if you select the workflow dropdown, you should see this:"}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.img,{alt:"Workflow Options Showing",src:n(3876).A+"",width:"602",height:"356"})}),"\n",(0,r.jsx)(o.h3,{id:"adding-initialization",children:"Adding Initialization"}),"\n",(0,r.jsxs)(o.p,{children:["Next, you'll be creating a new instance of your Basic Workflow. Start by adding the following code to your ",(0,r.jsx)(o.code,{children:"app.py"})," file:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/app.py"',children:'# highlight-start \nfrom tethys_sdk.base import TethysAppBase, url_map_maker\n# highlight-end\nfrom tethys_sdk.app_settings import PersistentStoreDatabaseSetting, SpatialDatasetServiceSetting, SchedulerSetting\n\nclass App(TethysAppBase):\n...\ndef register_url_maps(self):\n    """\n    Add controllers\n    """\n    from tethysext.workflows.controllers.workflows.workflow_router import WorkflowRouter\n    from tethysext.workflows.urls import workflows\n    from .workflows import BasicWorkflow\n\n    UrlMap = url_map_maker(self.root_url)\n    url_maps = super().register_url_maps(set_index=False)\n\n    url_maps.extend(\n        workflows.urls(\n            url_map_maker=UrlMap, \n            app=self,\n            persistent_store_name=self.DATABASE_NAME,\n            workflow_pairs=(\n                (BasicWorkflow, WorkflowRouter),\n            ),\n            base_template=\'workflows_tutorial/base.html\',\n        )\n    )\n    return url_maps \n\n'})}),"\n",(0,r.jsx)(o.p,{children:"Next, we'll need to update our workflow class's code:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",metastring:'title="/tethsyapp/workflows_tutorial/workflows/basic_workflow/__init__.py"',children:'    class BasicWorkflow(WorkflowBase):\n        ...\n\n        __mapper_args__ = {\'polymorphic_identity\': TYPE}\n\n        @classmethod\n        def new(cls, app, name, creator_id, description, creator_name, geoserver_name, map_manager, spatial_manager, **kwargs):\n            """\n            Factor class method that creates a new workflow with steps\n            Args:\n                app(TethysApp): The TethysApp hosting this workflow (e.g. Agwa).\n                name(str): Name for this instance of the workflow.\n                creator_id(str): Username of the user that created the workflow.\n                description(str): Description of the workflow.\n                creator_name(str): Username of the creator of the workflow.\n                geoserver_name(str): Name of the SpatialDatasetServiceSetting pointing at the GeoServer to use for steps with MapViews.\n                map_manager(MapManagerBase): The MapManager to use for the steps with MapViews.\n                spatial_manager(SpatialManager): The SpatialManager to use for the steps with MapViews.\n                kwargs: additional arguments to use when configuring workflows.\n\n            Returns:\n                Workflow: the new workflow.\n            """ \n            # Create new workflow instance\n            workflow = cls(name=name, description=description, creator_id=creator_id, creator_name=creator_name)\n\n            return workflow\n\n'})}),"\n",(0,r.jsx)(o.p,{children:'Now, refresh your application in the browser and click on the blue plus sign button, enter a name for your new workflow, and selecting "Basic Workflow" for your workflow type, and finally press "Create".'}),"\n",(0,r.jsx)(o.p,{children:"You should see something similar to this:"}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.img,{alt:"New Workflow Made",src:n(4991).A+"",width:"1920",height:"919"})}),"\n",(0,r.jsx)(o.h3,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(o.p,{children:["This concludes the Add Workflows Files portion of the Tethys Workflows Extension Tutorial. You can view the solution on GitHub at ",(0,r.jsx)(o.a,{href:"https://github.com/Aquaveo/tethysapp-workflows_tutorial",children:"https://github.com/Aquaveo/tethysapp-workflows_tutorial"})," or clone it as follows:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b add-workflows-files-step add-workflows-files-step-complete\n"})})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4991:(e,o,n)=>{n.d(o,{A:()=>t});const t=n.p+"assets/images/new_workflow_made_screenshot-8b56ad9a0d130a1eb8abf787f5542b8d.png"},3876:(e,o,n)=>{n.d(o,{A:()=>t});const t=n.p+"assets/images/workflow_options_select_screenshot-2f822b0c417144b47af85ce132569f16.png"},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>i});var t=n(6540);const r={},s=t.createContext(r);function a(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);