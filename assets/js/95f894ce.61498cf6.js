"use strict";(self.webpackChunkworkflows_extension=self.webpackChunkworkflows_extension||[]).push([[4156],{2414:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>_,frontMatter:()=>a,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"tutorial/add_result_step","title":"Add Result Steps to Workflows","description":"Start from Prevous Solution","source":"@site/docs/tutorial/add_result_step.md","sourceDirName":"tutorial","slug":"/tutorial/add_result_step","permalink":"/tethysext-workflows/docs/tutorial/add_result_step","draft":false,"unlisted":false,"editUrl":"https://github.com/Aquaveo/tethysext-workflows/edit/main/docs/docs/tutorial/add_result_step.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"add_result_step","title":"Add Result Steps to Workflows","sidebar_label":"Add Result Steps","excerpt":"Add result steps to your workflows","sidebar_position":9},"sidebar":"documentationSidebar","previous":{"title":"Add Workflow Jobs","permalink":"/tethysext-workflows/docs/tutorial/add_jobs"},"next":{"title":"Documentation","permalink":"/tethysext-workflows/docs/category/documentation-1"}}');var s=n(4848),r=n(8453);const a={id:"add_result_step",title:"Add Result Steps to Workflows",sidebar_label:"Add Result Steps",excerpt:"Add result steps to your workflows",sidebar_position:9},i=void 0,l={},p=[{value:"Start from Prevous Solution",id:"start-from-prevous-solution",level:3},{value:"Edit original job script",id:"edit-original-job-script",level:3},{value:"Solution",id:"solution",level:3}];function u(e){const t={a:"a",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"start-from-prevous-solution",children:"Start from Prevous Solution"}),"\n",(0,s.jsx)(t.p,{children:"If you wish to use the previous solution as a starting point:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b add-job-step add-job-step-complete\n"})}),"\n",(0,s.jsx)(t.p,{children:"After running your jobs, we'll want to visualize the job results. In this part of the tutorial, we'll be adding a step to visualize results in different ways."}),"\n",(0,s.jsx)(t.h3,{id:"edit-original-job-script",children:"Edit original job script"}),"\n",(0,s.jsxs)(t.p,{children:["First, you'll need to add a few things to your ",(0,s.jsx)(t.code,{children:"jobs.py"})," file to set up for the results step job."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/jobs.py"',children:"    def build_jobs_callback(condor_workflow):\n    \"\"\"\n    Define the Condor Jobs for the run step.\n\n    Returns:\n        list<dicts>: Condor Job dicts, one for each job.\n    \"\"\"\n    jobs = []\n    condor_env = get_condor_env()\n    workflow = condor_workflow.tethys_workflow\n\n    # Get the selected scenarios\n    points_step = workflow.get_step_by_name('Point In Boundary Step')\n    points_geometry = points_step.get_parameter('geometry')\n\n    # highlight-start\n    post_process_tif = []\n    post_process_input_files = []\n    post_process_parents = []\n    #highlight-end\n    \n    # Create one job per point\n    for idx, point in enumerate(points_geometry.get('features', [])):\n        # Set up the job for the generic job\n        executable = 'run_generic_job.py'\n        point_name = point.get('properties', {}).get('point_name', f'point_{idx + 1}')\n        job_name = f'run_{safe_str(point_name)}'\n        output_filename = f'{job_name}_out.json'\n\n        job = {\n            'name': job_name,\n            'condorpy_template_name': 'vanilla_transfer_files',\n            'category': 'generic_job',\n            'remote_input_files': [str(JOB_EXECUTABLES_DIR / executable), ],\n            'attributes': {\n                'executable': executable,\n                'arguments': [point_name, idx, output_filename],\n                'transfer_input_files': [f'../{executable}', ],\n                'transfer_output_files': [output_filename, ],\n                'environment': condor_env,\n                'request_cpus': REQUEST_CPUS_PER_JOB\n            }\n        }\n\n        # highlight-start\n        # Add output file as input to post processing job\n        post_process_tif.append(f'../{job_name}/{output_filename}')\n        post_process_input_files.append(output_filename)\n\n        # Add job as parent to post processing job\n        post_process_parents.append(job['name'])\n        # highlight-end\n\n        # Add to workflow jobs\n        jobs.append(job)\n\n    # highlight-start\n    # Setup post processing job\n    post_process_executable = 'run_post_process.py'\n    post_process_job = {\n        'name': 'post_processing',\n        'condorpy_template_name': 'vanilla_transfer_files',\n        'remote_input_files': [str(JOB_EXECUTABLES_DIR / post_process_executable), ],\n        'attributes': {\n            'executable': post_process_executable,\n            'arguments': [','.join(post_process_input_files)],\n            'transfer_input_files': post_process_tif,\n            'transfer_output_files': [],\n            'request_cpus': REQUEST_CPUS_PER_JOB,\n            'environment': condor_env,\n        },\n        'parents': post_process_parents,\n    }\n    jobs.append(post_process_job)\n    # highlight-end\n\n    return jobs\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Next, add ",(0,s.jsx)(t.code,{children:"run_post_process.py"})," to your job_executables folder with the following contents:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/job_executables/run_post_process.py"',children:'\n#!/opt/tethys-python\n\nimport json\nimport math\nfrom pprint import pprint\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tethysext.workflows.services.workflows.decorators import workflow_step_job\n\n\nincreasing_data = {"X": [0, 2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 21, 22, 25, 26, 28, 30, 31],\n                   "Y": [7, 11, 13, 10, 12, 8, 15, 17, 20, 16, 18, 24, 28, 25, 31, 23, 27, 35]}\n\ndecreasing_data = {"X": [1, 2, 4, 6, 8, 9, 10, 12, 17, 19, 20, 24, 26, 27, 28, 31, 32, 35],\n                     "Y": [35, 27, 23, 31, 25, 28, 24, 18, 16, 20, 17, 15, 8, 12, 10, 13, 11, 7]}\n\nrandom_data = {"X": [1, 3, 5, 6, 7, 8, 9, 11, 15, 18, 22, 23, 24, 27, 29, 34, 36, 38],\n               "Y": [4, 25, 16, 31, 12, 17, 30, 11, 20, 15, 10, 8, 32, 24, 33, 22, 18, 29]}\n\ndataset_choices = {"Increasing Data": increasing_data, "Decreasing Data": decreasing_data, "Random Data": random_data}\n\ndef form_point_feature(x, y, point_name):\n    """Generate a GeoJSON feature for a point."""\n    return {\n        "type": "Feature",\n        "properties": {\n            "name": point_name,\n        },\n        "geometry": {\n            "type": "Point",\n            "coordinates": [x, y]\n        }\n    }\n\ndef form_connecting_line_feature(start_point, end_point, first_point_name, second_point_name):\n    """Generate a GeoJSON feature for a connecting line between two points."""\n    return {\n        "type": "Feature",\n        "properties": {\n            "name": f"Connecting Line for {first_point_name} and {second_point_name}",\n        },\n        "geometry": {\n            "type": "LineString",\n            "coordinates": [\n                [start_point[0], start_point[1]],\n                [end_point[0], end_point[1]]\n            ]\n        }\n    }\n\n@workflow_step_job\ndef main(\n    db_session, workflow, step, gs_private_url, gs_public_url,\n    workflow_class, params_json, params_file, cmd_args, extra_args\n):\n    \n    print("Params JSON: ", params_json)\n\n    # Extract extra args\n    input_files = extra_args[0].split(\',\')\n    print(f\'Input Files: {input_files}\')\n\n    # Get series data from input files\n    series = {}\n    for series_file in input_files:\n        # Store the series data from each of the json files\n        with open(series_file) as f:\n            s = json.loads(f.read())\n        series[s[\'name\']] = s\n\n    for s_name, s in series.items():\n        print(s_name)\n        print(s)\n\n        geojson_features = []\n        # Variable to use for connecting lines\n        previous_point = None\n        new_point_name = "Original Point"\n        counter = 2\n        for x, y in zip(s[\'x\'], s[\'y\']):\n            # Create point feature\n            geojson_features.append(form_point_feature(x, y, new_point_name))\n            \n            # If this is not the first point, create a connecting line to the previous point\n            if previous_point:\n                geojson_features.append(form_connecting_line_feature(previous_point, [x, y], previous_point_name, new_point_name))\n\n            previous_point_name = new_point_name\n            new_point_name = f"Point {counter}"\n            counter += 1\n            \n            previous_point = [x, y]\n            \n        geojson = {\n            "type": "FeatureCollection",\n            "features": geojson_features\n        }\n\n        # Create Layer on Result Map with the new points and lines\n        print(\'Create result map layers...\')\n        map_result = step.result.get_result_by_codename(\'map_result\')\n        map_result.add_geojson_layer(\n            geojson=geojson,\n            layer_id=f\'{s_name}_point_locations\',\n            layer_name=f\'{s_name}_point_locations\',\n            layer_title=f\'{s_name} Point Locations\',\n            layer_variable=f\'{s_name}_point_locations\',\n            popup_title=s_name,\n            selectable=True,\n            label_options={\'label_property\': \'point_name\'},\n        )\n    \n    # Add series to table result\n    print(\'Create series tables...\')\n    table_result = step.result.get_result_by_codename(\'table_result\')\n    table_result.reset()\n\n    # Retrieve the table data from the Table Input Step\n    table_data = params_json[\'Table Input Step\'][\'parameters\'][\'dataset\']\n\n    # Multiply the values by 2\n    table_data[\'X\'] = [x * 2 for x in table_data[\'X\']]\n    table_data[\'Y\'] = [y * 2 for y in table_data[\'Y\']]\n    \n    df = pd.DataFrame({\'x\': table_data[\'X\'], \'y\': table_data[\'Y\']})\n    table_result.add_pandas_dataframe("Table Data", df, show_export_button=True)\n\n    # Add series to plot result\n    dataset_choice = params_json[\'Dataset Input Step\'][\'parameters\'][\'form-values\'][\'datasets\'][0]\n    data = dataset_choices[dataset_choice]\n    \n    print(\'Adding series to plot...\')\n    plot_result = step.result.get_result_by_codename(\'plot_result\')\n    plot_result.reset()\n    plot_result.add_series(dataset_choice, [data[\'X\'], data[\'Y\']])\n\n    # Add image to image result\n    image_result = step.result.get_result_by_codename(\'image_result\')\n    image_result.reset()\n    buf = io.BytesIO()\n    df.plot()\n    plt.savefig(buf, format="png")\n    buf.seek(0)\n    string = base64.b64encode(buf.read())\n    uri = urllib.parse.quote(string)\n    image_result.add_image(uri)\n\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Next, you'll need a ",(0,s.jsx)(t.code,{children:"results.py"})," file in the same directory as your ",(0,s.jsx)(t.code,{children:"jobs.py"})," file. Add this code to that file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/results.py"',children:"\nfrom tethysext.workflows.results import (\n    SpatialWorkflowResult, DatasetWorkflowResult, PlotWorkflowResult, ReportWorkflowResult, ImageWorkflowResult\n)\n\n\ndef build_results_tabs(geoserver_name, map_manager, spatial_manager):\n    \"\"\"\n    Define the tabs for the results step.\n\n    Returns:\n        list<ResourceWorkflowResult>: Results definitions.\n    \"\"\"\n    map_result = SpatialWorkflowResult(\n        name='Map',\n        codename='map_result',\n        description='Resulting transformations on original points displayed on a map.',\n        order=10,\n        options={\n            'layer_group_title': 'Points',\n            'layer_group_control': 'checkbox'\n        },\n        geoserver_name=geoserver_name,\n        map_manager=map_manager,\n        spatial_manager=spatial_manager\n    )\n\n    table_result = DatasetWorkflowResult(\n        name='Table',\n        codename='table_result',\n        description='Table dataset result.',\n        order=20,\n        options={\n            'data_table_kwargs': {\n                'paging': True,\n            },\n            'no_dataset_message': 'No peak flows found.'\n        },\n    )\n\n    plot_result = PlotWorkflowResult(\n        name='Plot',\n        codename='plot_result',\n        description='Plot dataset result.',\n        order=30,\n        options={\n            'renderer': 'plotly',\n            'axes': [],\n            'plot_type': 'lines',\n            'axis_labels': ['x', 'y'],\n            'line_shape': 'linear',\n            'x_axis_type': 'datetime',\n            'no_dataset_message': 'No dataset found.'\n        },\n    )\n\n    image_result = ImageWorkflowResult(\n        name='PNG Image',\n        codename='image_result',\n        description='PNG image result.',\n        order=40,\n        options={\n            'no_dataset_message': 'No image found.'\n        },\n    )\n\n    report_result = ReportWorkflowResult(\n        geoserver_name, \n        map_manager,\n        spatial_manager,\n        name='Report',\n        order=50\n    )\n\n\n    return [map_result, table_result, plot_result, image_result, report_result]\n\n"})}),"\n",(0,s.jsx)(t.p,{children:"Lastly, we'll add your results step to your workflow:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/__init__.py"',children:"    from ..workflow_base import WorkflowBase\n    # highlight-start\n    from tethysext.workflows.steps import SpatialInputStep, JobStep, TableInputStep, ResultsStep\n    # highlight-end\n    from .attributes import PointAttributes\n    from .jobs import build_jobs_callback\n    # highlight-start\n    from .results import build_results_tabs\n    # highlight-end\n\nclass BasicWorkflow(WorkflowBase):\n    ...\n    # highlight-start\n    result_step = ResultsStep(\n        name='Review Results',\n        order=80,\n        help='Review the results from the run step.',\n        options={},\n    )\n    execute_step.result = result_step  # set as result step for condor step\n    step = build_results_tabs(geoserver_name, map_manager, spatial_manager)\n    result_step.results.extend(step)\n    workflow.steps.append(result_step)\n    # highlight-end\n    return workflow\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now all that needs to be done is refresh your application, create a new workflow, and click next after completing the job step. You should see something like this:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Workflow Results Step Showing",src:n(9220).A+"",width:"1918",height:"909"})}),"\n",(0,s.jsx)(t.p,{children:"The result step here uses all four kinds of results offered in the Workflows Extension. You can review the results from the job that were run, along with generate a report on those results with notes that you can add right inside your Tethys application."}),"\n",(0,s.jsxs)(t.p,{children:["For more information on these results that you can use in workflows, check out the results documentation:",(0,s.jsx)(t.a,{href:"/tethysext-workflows/docs/documentation/workflow_results_documentation",children:"Workfllow Results Documentation"})]}),"\n",(0,s.jsx)(t.h3,{id:"solution",children:"Solution"}),"\n",(0,s.jsxs)(t.p,{children:["This concludes the Add Results Steps portion of the Tethys Workflows Extension Tutorial. You can view the solution on GitHub at ",(0,s.jsx)(t.a,{href:"https://github.com/Aquaveo/tethysapp-workflows_tutorial",children:"https://github.com/Aquaveo/tethysapp-workflows_tutorial"})," or clone it as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b results-step results-step-complete\n"})})]})}function _(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9220:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/workflow_results_screenshot-6002f5b7736620e4a7ef71b025b73d06.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);