"use strict";(self.webpackChunkworkflows_extension=self.webpackChunkworkflows_extension||[]).push([[7811],{3235:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"tutorial/add_jobs","title":"Add Jobs to Workflows","description":"After adding a step, let\'s move on to a workflow job. This will be a basic job that will perform a transformation on the coordinates of point(s) you place on the map in the first spatial input step, using the numbers you add in the second step in the table input. Those transformations will be displayed on a map in the next step.","source":"@site/docs/tutorial/add_jobs.md","sourceDirName":"tutorial","slug":"/tutorial/add_jobs","permalink":"/tethysext-workflows/docs/tutorial/add_jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/Aquaveo/tethysext-workflows/edit/main/docs/docs/tutorial/add_jobs.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"add_jobs","title":"Add Jobs to Workflows","sidebar_label":"Add Workflow Jobs","excerpt":"Add jobs to your workflow.","sidebar_position":8},"sidebar":"documentationSidebar","previous":{"title":"Add Workflow Steps","permalink":"/tethysext-workflows/docs/tutorial/add_workflows_steps"},"next":{"title":"Add Result Steps","permalink":"/tethysext-workflows/docs/tutorial/add_result_step"}}');var s=o(4848),r=o(8453);const i={id:"add_jobs",title:"Add Jobs to Workflows",sidebar_label:"Add Workflow Jobs",excerpt:"Add jobs to your workflow.",sidebar_position:8},a=void 0,l={},p=[{value:"Start from Previous Solution",id:"start-from-previous-solution",level:3},{value:"Job Executables",id:"job-executables",level:3},{value:"Solution",id:"solution",level:3}];function d(e){const t={a:"a",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"After adding a step, let's move on to a workflow job. This will be a basic job that will perform a transformation on the coordinates of point(s) you place on the map in the first spatial input step, using the numbers you add in the second step in the table input. Those transformations will be displayed on a map in the next step."}),"\n",(0,s.jsx)(t.h3,{id:"start-from-previous-solution",children:"Start from Previous Solution"}),"\n",(0,s.jsx)(t.p,{children:"If you wish to use the previous solution as a starting point:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b add-workflow-step-step add-workflow-step-step-complete\n"})}),"\n",(0,s.jsx)(t.h3,{id:"job-executables",children:"Job Executables"}),"\n",(0,s.jsxs)(t.p,{children:["Begin by adding the following code to your ",(0,s.jsx)(t.code,{children:"app.py"})," file. We'll need this to find where our job scripts are stored."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/app.py"',children:'    ...\n    # highlight-start\n    import os\n    # highlight-end \n\n    class App(TethysAppBase):\n        ...\n        # highlight-start\n        @classmethod\n        def get_job_executables_dir(cls):\n            """\n            Returns:\n                str: the path to the directory containing the job executables.\n            """\n            return os.path.join(os.path.dirname(__file__), \'job_executables\')\n        # highlight-end\n'})}),"\n",(0,s.jsx)(t.p,{children:"Next, we'll need a jobs.py file:"}),"\n",(0,s.jsxs)(t.p,{children:["Add a file named ",(0,s.jsx)(t.code,{children:"jobs.py"})," to your ",(0,s.jsx)(t.code,{children:"basic_workflow"})," folder with these contents:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/jobs.py"',children:"\n    from pathlib import Path\n    from ..utilities import safe_str, get_condor_env\n\n    REQUEST_CPUS_PER_JOB = 1\n    JOB_EXECUTABLES_DIR = Path(__file__).parent / 'job_executables'\n\n\n    def build_jobs_callback(condor_workflow):\n        \"\"\"\n        Define the Condor Jobs for the run step.\n\n        Returns:\n            list<dicts>: Condor Job dicts, one for each job.\n        \"\"\"\n        jobs = []\n        condor_env = get_condor_env()\n        workflow = condor_workflow.tethys_workflow\n\n        # Get the selected scenarios\n        points_step = workflow.get_step_by_name('Point In Boundary Step')\n        points_geometry = points_step.get_parameter('geometry')\n\n        # Create one job per point\n        for idx, point in enumerate(points_geometry.get('features', [])):\n            # Set up the job for the generic job\n            executable = 'run_generic_job.py'\n            point_name = point.get('properties', {}).get('point_name', f'point_{idx + 1}')\n            job_name = f'run_{safe_str(point_name)}'\n            output_filename = f'{job_name}_out.json'\n\n            job = {\n                'name': job_name,\n                'condorpy_template_name': 'vanilla_transfer_files',\n                'category': 'generic_job',\n                'remote_input_files': [str(JOB_EXECUTABLES_DIR / executable), ],\n                'attributes': {\n                    'executable': executable,\n                    'arguments': [point_name, idx, output_filename],\n                    'transfer_input_files': [f'../{executable}', ],\n                    'transfer_output_files': [output_filename, ],\n                    'environment': condor_env,\n                    'request_cpus': REQUEST_CPUS_PER_JOB\n                }\n            }\n\n            # Add to workflow jobs\n            jobs.append(job)\n\n        return jobs\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Next, add a folder called ",(0,s.jsx)(t.code,{children:"job_executables"})," in your ",(0,s.jsx)(t.code,{children:"basic_workflow"})," folder. This folder will hold the scripts that get run as part of our jobs."]}),"\n",(0,s.jsxs)(t.p,{children:["The first file you'll add to this new folder will be called ",(0,s.jsx)(t.code,{children:"run_generic_job.py"}),", with the following contents:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/job_executables/run_generic_job.py"',children:"#!/opt/tethys-python\n\nimport json\nfrom pprint import pprint\nfrom shapely.geometry import Point, Polygon\n\nfrom tethysext.workflows.services.workflows.decorators import workflow_step_job\n\n\n@workflow_step_job\ndef main(\n    db_session, workflow, step, gs_private_url, gs_public_url, workflow_class, \n    params_json, params_file, cmd_args, extra_args\n):\n    # Extract extra args\n    point_name = extra_args[0]\n    output_filename = extra_args[2]\n\n    print(\"Params JSON: \", params_json)\n\n    boundary_points = params_json['Boundary Input Step']['parameters']['geometry']['features'][0]['geometry']['coordinates'][0]\n    boundary_polygon = Polygon(boundary_points)\n    print(f\"\\n\\n\\nBoundary Points: {boundary_points}\\n\\n\\n\")\n\n    # Find the point id and original point coordinates from the Point In Boundary Step\n    features = params_json['Point In Boundary Step']['parameters']['geometry']['features']\n    for feature in features:\n        if feature['properties']['point_name'] == point_name:\n            print(f\"\\n\\n\\nFeature: {feature}\\n\\n\\n\")\n            point_id = feature['properties']['id']\n            original_point_coordinates = feature['geometry']['coordinates']\n\n    # Get the transformations for the point from the Spatial Dataset Step\n    transformations = params_json['Spatial Dataset Step']['parameters']['datasets'][point_id]\n    print(\"Transformations: \", transformations)\n\n    print(f'Running job for point: {point_name}')\n    x = [original_point_coordinates[0]]\n    y = [original_point_coordinates[1]]\n\n    # Apply the transformations to the point and check if each new point is within the boundary\n    for index in range(len(transformations['X'])):\n        new_coords = [original_point_coordinates[0] + float(transformations['X'][index]), original_point_coordinates[1] + float(transformations['Y'][index])]\n        if boundary_polygon.contains(Point(new_coords)):\n            x.append(new_coords[0])\n            y.append(new_coords[1])\n\n    # Create the series data\n    series = {\n        'name': point_name,\n        'x': x,\n        'y': y,\n    }\n\n    print('Results:')\n    pprint(series, compact=True)\n\n    # Save to file\n    print('Saving File... ')\n    with open(output_filename, 'w') as f:\n        f.write(json.dumps(series))\n\n    print('Saved file Successfully')\n\n"})}),"\n",(0,s.jsx)(t.p,{children:"This script will do a few things. First, it will pull the transformation data assigned to each of the point(s) you've placed on the map and transform the original coordinates of each point with that data. It will then make sure that those new coordinates are inside the boundary you've placed on the map in the first step. You'll add those points to a map in the next step of this tutorial."}),"\n",(0,s.jsx)(t.p,{children:"Lastly, add the following step to your workflow code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="/tethysapp/workflows_tutorial/workflows/basic_workflow/__init__.py"',children:"    from ..workflow_base import WorkflowBase\n    # highlight-start\n    from tethysext.workflows.steps import SpatialInputStep, SpatialDatasetStep, TableInputStep, FormInputStep, SetStatusStep, JobStep\n    # highlight-end\n    from .attributes import PointAttributes\n    # highlight-start\n    from .jobs import build_jobs_callback\n    # highlight-end\n\n    import pandas as pd\n\n    Class BasicWorkflow(WorkflowBase):\n    ...\n\n    # highlight-start\n    execute_step = JobStep(\n        name='Run Job Step',\n        order=70,\n        help='Review input and then press the Run button to run the workflow. '\n        'Press Next after the execution completes to continue.',\n        options={\n            'scheduler': app.SCHEDULER_NAME,\n            'jobs': build_jobs_callback,\n            'working_message': 'Please wait for the execution to finish running before proceeding.',\n            'error_message': 'An error occurred with the run. Please adjust your input and try running again.',\n            'pending_message': 'Please run the workflow to continue.'\n        },\n        geoserver_name=geoserver_name,\n        map_manager=map_manager,\n        spatial_manager=spatial_manager,\n    )\n    workflow.steps.append(execute_step)\n    # highlight-end\n\n    return workflow\n"})}),"\n",(0,s.jsx)(t.p,{children:'Refresh your app, and create a new workflow. Complete the first step, and hit "Next". You\'ll see the map with the point you\'ve selected. Click "Run", and you\'ll see this:'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Workflow Job Running",src:o(907).A+"",width:"1919",height:"909"})}),"\n",(0,s.jsx)(t.p,{children:"Wait for the job to finish running."}),"\n",(0,s.jsx)(t.p,{children:"You should find a folder called workspaces/userworkspaces/your_username\nInside that folder you'll find a new folder with a random set of characters for the name. Inside you'll find the out.json file with your job's results. Those results will be the original coordinates of the original point, along with the new transformed coordinates that are inside the boundaries you've chosen. In the next step, you'll visualize those results, along with other data from your workflow."}),"\n",(0,s.jsx)(t.h3,{id:"solution",children:"Solution"}),"\n",(0,s.jsxs)(t.p,{children:["This concludes the Add Jobs portion of the Tethys Workflows Extension Tutorial. You can view the solution on GitHub at ",(0,s.jsx)(t.a,{href:"https://github.com/Aquaveo/tethysapp-workflows_tutorial",children:"https://github.com/Aquaveo/tethysapp-workflows_tutorial"})," or clone it as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/Aquaveo/tethysapp-workflows_tutorial.git\ncd tethysapp-workflows_tutorial\ngit checkout -b add-job-step add-job-step-complete\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},907:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/job_running_screenshot-46c000ad67d86c689f05b919e3000e4a.png"},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>a});var n=o(6540);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);